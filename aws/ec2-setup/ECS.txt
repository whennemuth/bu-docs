1) Create an IAM user that the AWS CLI is to use to access the AWS ECR (docker registry)
   http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-set-up.html#cli-signup
   a) Goto the IAM console
   b) Under IAM Resources, click "Users: 0"
   c) Click "Create New Users"
   d) Add a user "jenkins"
   e) Save the access key id and the secret access key in a safe location.
   f) Under the "Permissions" tab, click "Attach Policy" and select "AmazonEC2ContainerRegistryFullAccess" and "AmazonEC2FullAccess"

2) Create the registry (ECR)
   a) go to:
      https://console.aws.amazon.com/ecs/home?region=us-east-1#/repositories
   b) Click "Get started" and type "kuali-research" for the repository name.
      Our AWS account is 730096353738, so this will make the URL for the repo: 
         https://730096353738.dkr.ecr.us-east-1.amazonaws.com/kuali-research
   c) Click "Done"
      This will produce a screen that shows examples of accessing the registry through the cli or docker:

         1) Retrieve the docker login command that you can use to authenticate your Docker client to your registry:
            aws ecr get-login --region us-east-1
         
         2) Run the docker login command that was returned in the previous step.
         3) Build your Docker image using the following command. For information on building a Docker file from scratch see the instructions here. You can skip this step if your image is already built:
            docker build -t kuali-research .
         
         4) After the build completes, tag your image so you can push the image to this repository:
            docker tag kuali-research:latest 730096353738.dkr.ecr.us-east-1.amazonaws.com/kuali-research:latest
         
         5) Run the following command to push this image to your newly created AWS repository:
            docker push 730096353738.dkr.ecr.us-east-1.amazonaws.com/kuali-research:latest      

3) Install docker if it is not already:
   a) sudo curl -fsSL https://get.docker.com/ | sh
   b) If not already installed to start on boot create the following:
         sudo echo "service docker start" > /etc/profile.d/start-docker.sh

4) Install java 8 jdk if not already (NOTE AWS AMI comes with the only the 1.7 openjdk jre, not jdk - "openjdk" is misleading)
   a) Install it:
         yum install -y java-1.8.0-openjdk-devel
         update-alternatives --display java | grep Current
   b) Get the JAVA_HOME variable to be set on startup (NOTE - maven will find this location anyway, even if JAVA_HOME is not set):
         echo "export JAVA_HOME=/usr/lib/jvm/java-1.8.0/" > /etc/profile.d/set-java-home.sh

5) Install maven 3
      sudo wget http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo
      sudo sed -i s/\$releasever/6/g /etc/yum.repos.d/epel-apache-maven.repo
      sudo yum install -y apache-maven
      mvn --version

6) Install the remaining necessary items:
      yum -y update && \
      yum install -y git-all && \
      yum install -y git nginx aws-cli && \
      yum install -y nodejs npm --enablerepo=epel

7) Install Jenkins:
      a) Install from stable RPM:
            sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins.io/redhat-stable/jenkins.repo
            sudo rpm --import http://pkg.jenkins.io/redhat-stable/jenkins.io.key
            sudo yum install -y jenkins
      b) Add jenkins user to docker group
            sudo usermod -aG docker jenkins
            getent group | grep -P "(jenkins)|(docker)|(root)"
      c) Log into the EC2 instance(s) that jenkins will deploy to and create a jenkins user there in the docker group:
            sudo su root
            useradd -d "/home/jenkins" -u 1000 -g docker -m -s /bin/bash jenkins
            mkdir -m 700 /home/jenkins/.ssh
            cd /home/jenkins/.ssh        
            ssh-keygen -b 2048 -t rsa -f bu_kuali_id_jenkins_rsa -q -N ""
            touch authorized_keys
            chmod 600 authorized_keys
            cat bu_kuali_id_jenkins_rsa.pub >> authorized_keys
            rm bu_kuali_id_jenkins_rsa.pub
            # NOTE: Save the private key locally before you delete it.
            rm -f bu_kuali_id_jenkins_rsa
            chown -R jenkins:docker /home/jenkins/.ssh
            
      d) Log back into the CI instance and configure SSH access
            if [ ! -d /var/lib/jenkins/.ssh ] ; then mkdir /var/lib/jenkins/.ssh; fi
            cd .ssh
            # NOTE: If not there already, copy keys that will grant ssh access to the github repo(s), and any other ec2-instances that jenkins will be deploying builds to.
            # Avoid ssh prompt to accept host when connecting by putting host in known_hosts file:
            ssh-keyscan -t rsa github.com >> /var/lib/jenkins/.ssh/known_hosts
            ssh-keyscan -t rsa 10.57.237.84 >> /var/lib/jenkins/.ssh/known_hosts
            # etc...
            chown -R jenkins:jenkins /var/lib/jenkins/.ssh
            chmod 700 /var/lib/jenkins/.ssh
            chmod 600 /var/lib/jenkins/.ssh/*

            # NOTE: If security is enabled, credentials need to be used by jenkins-cli that matched the logged in user (or if not logged in, the jenkins user)
            # Explicitly using the user and password (or password file) does not work with jenkins-cli, so you must use an ssh key instead.
            # You enter the public key value in a field at localhost:8080/user/[username]/configure
            # Jenkins will look for the corresponding private key as ~/.ssh/id_rsa. If you do not use this name you must explicitly name the private key file with
            # -i "path/to/private/key/mykey" when executing a cli command.
            cd /var/lib/jenkins/.ssh
            ssh-keygen -b 2048 -t rsa -f id_rsa -q -N ""
            # when jenkins is running, paste contents of /var/lib/jenkins/.ssh/id_rsa.pub to localhost:8080/user/[username]/configure
            # where [username] is any user who can log in and whose credentials derive from the global system credentials.
 
8) If jenkins is being installed on an Amazon Linux AMI instance, then the aws cli should already be installed.
   If not and you want aws cli commands available to your jenkins jobs, install it:
      a) 
         curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip" && \
         unzip awscli-bundle.zip && \
         ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      b)
         In browser, go to: "[jenkins root]/configure
         Global Properties --> Environment variables --> Add:
         Name = PATH
         Value = $PATH:/usr/local/bin

9) If jenkins is being installed on an Amazon Linux AMI instance, then the aws ssm agent should already be installed. 
   If not and you want to execute shell commands remotely through the aws cli on another ec2 instance, install it:
      mkdir /tmp/ssm
      curl https://amazon-ssm-region.s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o /tmp/ssm/amazon-ssm-agent.rpm
      sudo yum install -y /tmp/ssm/amazon-ssm-agent.rpm
      # CentOS 7.x
           sudo systemctl start amazon-ssm-agent
           sudo systemctl status amazon-ssm-agent
      # CentOS 6.x
           sudo start amazon-ssm-agent
           status amazon-ssm-agent

10) Configure the AWS CLI on the jenkins server for the jenkins user.
   http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html
   a) sudo su jenkins
   b) aws configure
         AWS Access Key ID [None]: [access key ID]
         AWS Secret Access Key [None]: [secret key]
         Default region name [None]: us-east-1
         Default output format [None]: json
   c) test logging docker into the registry:
         eval $(aws ecr get-login --region us-east-1)
   d) test access to the registry by making a call with the registry api:
          aws ecr describe-repositories

11) Start jenkins and set it to restart on boot
      service jenkins start
      chkconfig --add jenkins

12) Configure jenkins:
   Navigate to: http://[ec2 public DNS]:8080/
   a) Enter the value in /var/lib/jenkins/secrets/initialAdminPassword in the password challenge.
   b) Next, this version of jenkins will present a selection of plugins.
      Accept the items checked by default.
   c) Next, you will be asked to create the first admin user.
      Enter the appropriate details.
   d) Jenkins --> Global Tool Configuration:	
         JDK: JDK Installations:
             Name = "jdk-1.8.0"
             JAVA_HOME	= /usr/lib/jvm/java-1.8.0/ (echo JAVA_HOME if unsure)
             Install automatically = UNCHECKED
         Maven: Maven Installations
             Name = "maven 3.3.9"
             MAVEN_HOME = /usr/share/apache-maven/ (echo MAVEN_HOME if unsure) 
             Install automatically = UNCHECKED
   e) Some jobs will run other jobs. To do this jenkins-cli.jar is needed.
      1. Get the jenkins-cli.jar:
         cd /var/lib/jenkins
         wget http://localhost:8080/jnlpJars/jenkins-cli.jar
         chown jenkins:jenkins /var/lib/jenkins/jenkins-cli.jar

      2. In order to make cli commands without encountering "java.io.StreamCorruptedException: invalid stream header: 0A0A0A0A",
         - Go to http://[jenkins root]/configureSecurity/
         - Check "Enable Security"
         - Select "Random" for "TCP port for JNLP agents"

      3. A single jenkins job may call another job which in turn may call yet another.
         This means there need to be a minimum of 3 executors available to jenkins (3 concurrent jobs).
         Also, aside from this multiple related jobs scenario, it is likely that there may be multiple DIS-related jobs running concurrently.
         Therefore, start with a modest default of 5 executors:
         - Go to http://[jenkins root]/configure/
         - Change the entry in "# of executors" from the default of "2" to "5"

   f) To setup a webhook click the "Webhooks & services" link in your github respository in the github website.
      1. Payload URL: http://[url of jenkins ec2 instance]:8080/github-webhook/
      2. Content type: application/x-www-form-urlencoded
      3. Secret: Leave blank
      4. Which events would you like to trigger this webhook?: Just the push event.
      5. Check "Active"
      For a job to use the webhook, go to the "Source Code Management" section and check "git"
      Under "Repositories":
      1. Repository URL: http://github.com/[github account]/[repo name]
      2. Credentials: None
      In order to avoid the following error using webhooks with github:
         "HTTP ERROR 403 No valid crumb was included in the request"
      Goto "Configure Global Security" and uncheck "Prevent Cross Site Request Forgery exploits".
      We are not exposing our Jenkins instance to the world, so that should be fine.
   g) Increase the memory for jobs that run maven builds:
      "Manage Jenkins" --> "Configure System" --> "Maven Project Configuration" --> "Global MAVEN_OPTS":
      -Xmx3072m -Xms512m -XX:MaxPermSize=256m
   h) Pull any saved jenkins jobs from github:
      cd /var/lib/jenkins/jobs
         git init
         git remote add github git@github.com:bu-ist/kuali-research-jenkins.git
         git fetch github master 
         git reset --hard FETCH_HEAD
         chown jenkins:jenkins *
         chown -R jenkins:jenkins .git
         chown jenkins:jenkins .gitignore
   i) Setup security for the AWS CLI:
         cd /var/lib/jenkins && \
         mkdir .aws && \
         cd .aws && \
         touch config && \
         echo "[profile sandbox]" >> config && \
         echo "aws_access_key_id=foo" >> config && \
         echo "aws_secret_access_key=bar" >> config && \
         echo "region=us-east-1" >> config && \
         echo "output=json" >> config && \
         echo "[profile test]" >> config && \
         echo "# etc..." >> config && \
         cd .. && \
         chown -R jenkins:docker .aws && \
         chmod 700 .aws && \
         chmod 600 .aws/config
   j) The last parts of a docker build include running an aws ecr command remotely using an aws ssm send-command locally.
      Therefore, since "the Amazon SSM agent runs as root on Linux", the same aws configuration needs to be set for root on the application EC2 instance:
         sudo su root
         cd ~ && \
         mkdir .aws && \
         cd .aws && \
         touch config && \
         echo "[profile sandbox]" >> config && \
         echo "aws_access_key_id=foo" >> config && \
         echo "aws_secret_access_key=bar" >> config && \
         echo "region=us-east-1" >> config && \
         echo "output=json" >> config && \
         echo "[profile test]" >> config && \
         echo "# etc..." >> config && \
         cd .. && \
         chown -R root:docker .aws && \
         chmod 700 .aws && \
         chmod 600 .aws/config
