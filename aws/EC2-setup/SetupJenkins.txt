After creating a new AWS Linux AMI EC2 instance:

1) 
   a) Create an SSH keypair for the EC2 instance

         ssh-keygen -t rsa -b 2048 -v
         name the key "jenkins_ec2_id_rsa"
         leave passphrase blank

   b) Log into the AWS console
      Goto "Network & Security" --> "Key Pairs" and import the public key.

2) Setup a security groups:
   a) "jenkins-security-group"

      inbound:
         ---------------------------------------------------
         Type              Protocol   Port Range   Source 
         ---------------------------------------------------
         HTTP              TCP        80           0.0.0.0/0
         SSH               TCP        22           0.0.0.0/0
         Custom TCP Rule   TCP        2375         0.0.0.0/0
         All ICMP          All        N/A          0.0.0.0/0

      outbound (TODO - make more restrictive):
         ---------------------------------------------------
         Type              Protocol   Port Range   Source 
         ---------------------------------------------------
         All traffic       All        All          0.0.0.0/0

3) Shell into the ec2 instance.
   The Amazon linux AMI comes with java 1.7 installed at /usr/lib/jvm
   Install the java 1.8 jdk:
   a) sudo su root
   b) download the jdk
         wget --no-check-certificate --no-cookies --header "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/8u92-b14/jdk-8u92-linux-x64.tar.gz && \
         tar -zxf jdk-8u92-linux-x64.tar.gz -C /usr/lib/jvm && \
         rm -f jdk-8u92-linux-x64.tar.gz
   c) Edit /etc/bashrc file by adding the following to the end of it:
         JAVA_HOME=/usr/lib/jvm/jdk1.8.0_92/jre
         export JAVA_HOME
         export PATH=$PATH:/usr/lib/jvm/jdk1.8.0_92/bin:/usr/lib/jvm/jdk1.8.0_92/jre/bin
   d) Put the new JDK first in line (make it the default)
         update-alternatives --install "/usr/bin/java" "java" "/usr/lib/jvm/jdk1.8.0_92/jre/bin/java" 1
         update-alternatives --config java
         # type the option number provided for the added java exe
         java -version
         # should be: java version "1.8.0_92"

4) Install and configure docker:
   a) sudo curl -fsSL https://get.docker.com/ | sh
   b) Add the ec2-user user to the docker group:
      usermod -aG docker ec2-user

5) Install maven
   mkdir -p /usr/share/maven \
   && curl -fsSL http://apache.osuosl.org/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz \
     | tar -xzC /usr/share/maven --strip-components=1 \
   && ln -s /usr/share/maven/bin/mvn /usr/bin/mvn

6) Install the remaining necessary items:
      yum -y update && \
      yum install -y git nginx aws-cli \
      yum install -y nodejs npm --enablerepo=epel

7) Install jenkins:
      wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo && \
      rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key && \
      yum install jenkins

8) Add Jenkins user to docker group:
      usermod -a -G docker jenkins

9) Double check users and groups are set correctly

   getent passwd | grep -P "(jenkins)|(docker)|(ec2-user)"
   # Output should be like:
   #     ec2-user:x:500:500:EC2 Default User:/home/ec2-user:/bin/bash
   #     jenkins:x:1000:1000::/var/lib/jenkins:/bin/bash

   getent group | grep -P "(jenkins)|(docker)|(ec2-user)"
   # Output should be like:
   #     wheel:x:10:ec2-user
   #     ec2-user:x:500:
   #     docker:x:497:ec2-user,jenkins
   #     jenkins:x:1000:

9) Configure SSH access correctly for each user
   sudo su root
   # Give the jenkins user whatever ssh allowances that the ec2-user has:
   mkdir /var/lib/jenkins/.ssh
   chmod 700 /var/lib/jenkins/.ssh
   cp /home/ec2-user/.ssh/* /var/lib/jenkins/.ssh
   # If not there already, copy keys that will grant ssh access to the github repo(s), and any other ec2-instances that jenkins will be deploying builds to.
   ssh-keyscan -t rsa github.com >> /var/lib/jenkins/.ssh/known_hosts
   # Repeat the above ssh-keyscan for each of the other hosts there is a private key for.
   [in a local shell]: 
        # transfer private key for github access to jenkins user on jenkins EC2 instance.
   	scp -C -i /c/[path to your home dir]/.ssh/ec2_rsa /c/[path to your home dir]/.ssh/github_id_jenkins_rsa jenkins@[ec2 public dns]:/var/lib/jenkins/.ssh
   	scp -C -i /c/[path to your home dir]/.ssh/ec2_rsa /c/[path to your home dir]/.ssh/other_ec2_id_rsa jenkins@[ec2 public dns]:/var/lib/jenkins/.ssh
        # etc...
        chmod 600 /var/lib/jenkins/.ssh/github_id_jenkins_rsa
        chmod 600 /var/lib/jenkins/.ssh/other_ec2_id_rsa
        # etc...
   chown -R jenkins:jenkins /var/lib/jenkins/.ssh

   # Restrict access of these keys to the owner (jenkins) exclusively.
   chmod 600 github_id_jenkins_rsa
   chmod 600 jenkins_ec2_id_rsa
   exit [become ec2-user]
   ssh-keyscan -t rsa github.com >> /home/ec2-user/.ssh/known_hosts

10) Start jenkins and set it to restart on boot
      service jenkins start
      chkconfig --add jenkins

11) Verify jenkins:
   Navigate to: http://[ec2 public DNS]:8080/
   a) Enter the value in /var/lib/jenkins/secrets/initialAdminPassword in the password challenge.
   b) Next, this version of jenkins will present a selection of plugins.
      Accept the items checked by default.
   c) Next, you will be asked to create the first admin user.
      Enter the appropriate details.
   d) Go to /configureTools/
         Click "Add JDK":
            Uncheck "Install automatically"
            Name = jdk8
            JAVA_HOME = /usr/lib/jvm/jdk1.8.0_92
         Click "Add Maven"
            Uncheck "Install automatically"
            Name = maven 3.3.9
            MAVEN_HOME = /usr/share/maven
      Click "Save"
   e) Some jobs will run other jobs. To do this jenkins-cli.jar is needed.
      1. Get the jenkins-cli.jar:
         cd /home/jenkins
         wget http://localhost:8080/jnlpJars/jenkins-cli.jar
      2. In order to make cli commands without encountering "java.io.StreamCorruptedException: invalid stream header: 0A0A0A0A",
         - Go to http://[jenkins root]/configureSecurity/
         - Check "Enable Security"
         - Select "Random" for "TCP port for JNLP agents"
   f) To setup a webhook click the "Webhooks & services" link in your github respository in the github website.
      1. Payload URL: http://ec2-52-37-165-82.us-west-2.compute.amazonaws.com:8080/github-webhook/
      2. Content type: application/x-www-form-urlencoded
      3. Secret: Leave blank
      4. Which events would you like to trigger this webhook?: Just the push event.
      5. Check "Active"
      For a job to use the webhook, go to the "Source Code Management" section and check "git"
      Under "Repositories":
      1. Repository URL: http://github.com/[github account]/[repo name]
      2. Credentials: None
      In order to avoid the following error using webhooks with github:
         "HTTP ERROR 403 No valid crumb was included in the request"
      Goto "Configure Global Security" and uncheck "Prevent Cross Site Request Forgery exploits".
      We are not exposing our Jenkins instance to the world, so that should be fine.
   g) Increase the memory for jobs that run maven builds:
      "Manage Jenkins" --> "Configure System" --> "Maven Project Configuration" --> "Global MAVEN_OPTS":
      -Xmx3072m -Xms512m -XX:MaxPermSize=256m

   h) Go to /pluginManager/available and add the following plugins:

         Authentication Tokens API Plugin
         Docker Commons Plugin
         Pre SCM BuildStep Plugin
         Docker build step plugin
         Publish Over SSH
         FindBugs Plug-in
         	
      The total plugins installed should be:

         Folders Plugin 
         JUnit Plugin 
         Script Security Plugin 
         Matrix Project Plugin 
         OWASP Markup Formatter Plugin 
         PAM Authentication plugin 
         Windows Slaves Plugin 
         Mailer Plugin 
         LDAP Plugin 
         Token Macro Plugin 
         Icon Shim Plugin 
         Matrix Authorization Strategy Plugin 
         External Monitor Job Type Plugin 
         build timeout plugin 
         Credentials Plugin 
         Structs Plugin 
         Pipeline: Step API 
         Plain Credentials Plugin 
         Credentials Binding Plugin 
         Timestamper 
         Workspace Cleanup Plugin 
         Ant Plugin 
         Gradle plugin 
         JavaScript GUI Lib: jQuery bundles (jQuery and jQuery UI) plugin 
         Durable Task Plugin 
         Pipeline: API 
         Pipeline: Supporting APIs 
         Pipeline: Job 
         Pipeline: REST API Plugin 
         JavaScript GUI Lib: Handlebars bundle plugin 
         JavaScript GUI Lib: Moment.js bundle plugin 
         Pipeline: Stage View Plugin 
         Pipeline: Build Step 
         JavaScript GUI Lib: ACE Editor bundle plugin 
         Pipeline: SCM Step 
         SCM API Plugin 
         Pipeline: Groovy 
         SSH Credentials Plugin 
         Git client plugin 
         Git server plugin 
         Pipeline: Shared Groovy Libraries 
         Branch API Plugin 
         Pipeline: Multibranch 
         Pipeline: Nodes and Processes 
         Pipeline: Input Step 
         Pipeline: Stage Step 
         Pipeline: Basic Steps 
         Pipeline 
         Javadoc Plugin 
         GitHub API Plugin 
         Git plugin 
         GitHub plugin 
         GitHub Branch Source Plugin 
         GitHub Organization Folder Plugin 
         Pipeline: Stage View Plugin 
         Git plugin 
         MapDB API Plugin 
         Subversion Plug-in 
         SSH Slaves plugin 
         Matrix Authorization Strategy Plugin 
         PAM Authentication plugin 
         LDAP Plugin 
         Email Extension Plugin 
         Mailer Plugin 
         Maven Integration plugin 
         Static Analysis Utilities 
         Checkstyle Plug-in 
         Cobertura Plugin 
         JUnit Plugin 
         Authentication Tokens API Plugin
         Docker Commons Plugin
         Pre SCM BuildStep Plugin
         Docker build step plugin
         Publish Over SSH
         FindBugs Plug-in

