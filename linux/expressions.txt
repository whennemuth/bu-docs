# Version of Linux (distro):
cat /etc/*-release

# Kernel version and gcc version used to build the same:
cat /proc/version

# Kernel version:
uname -a

# List directories from the root according to size in descending order:
sudo du -x -d1 -h / | sort -h -r

# How much memory do I have (megabytes)
free -m

# Search all directories for a file by name (case-insensitive search)
sudo find / -type f -iname "myfile.txt" 

# sed example using regex and captured match to make a replacement (in a file, using -i parameter)
# Replace a quoted value with itself, followed by a space and another quoted value
# The quoted value in the example is 'protocol="AJP/1.3"'
# NOTE: it is difficult to escape single quotes within single quotes with sed, so bound the expression with double-quotes.
sed -i -r "s/(protocol=[\"']AJP\/1\.3[\"'])/\1 tomcatAuthentication=\"false\"/g" server.xml

# Search through a directory and its subdirectories recursively for any files containing text that matches a specified pattern:
grep -irP 'my regex pattern' /etc/my/directory

# Query memory usage:
grep -P '(Mem)|(Cache)|(Swap)' /proc/meminfo

# Use tcpdump to screen for all traffic on (or except) a particlar port with packet ascii content matching a pattern
tcpdump -XX -n port 8080 | grep -i -P '(forwarded-for)|(REMOTE_USER)' -A 10 -B 10
tcpdump -XX -n port not 22 | grep -i -P '(forwarded-for)|(REMOTE_USER)' -A 10 -B 10
tcpdump k /opt/kuali/tls/private/kuali-research.bu.edu-2048bit-sha256-2016.key -i eth0 -dXXn port 8080 or 443
# See what http(s) traffic is getting into the host bound for coi:
tcpdump -vvAls0 | grep 'GET' | grep -i '/coi/'
tcpdump -vvvs 1024 -l -A host kuali-research-qa.bu.edu | grep -i 'kuali-research-qa.bu.edu'

# Find out what the latest release of a major version of tomcat is (tomcat 8 in this case)
curl "https://archive.apache.org/dist/tomcat/tomcat-8/?C=M;O=A" | grep 'v8' | tail -n 1 | grep -Po '(?<=>)[^<>]+(?=</a>)' | sed 's/\///'

# Send the output of a command to nothing (won't get printed)
mycommand > /dev/null

# Send the output of stdout to stderr
mycommand > 1>&2

# Suppress output unless it's an error
mycommand > /dev/null 2>&1

# SCP example: Quick transfer of war files between servers:
# 1) Transfer private key to jenkins server from laptop.
scp -C -i /c/Users/wrh/.ssh/buaws-kuali-rsa /c/Users/wrh/.ssh/buaws-kuali-rsa wrh@10.57.236.6:/home/wrh/.ssh/
# 2) log into jenkins server and reduce permissions on the private key
chmod 600 ~/.ssh/buaws-kuali-rsa
# 3) From the jenkins server transfer the last built war file to another server (staging in this case)
scp -C -i ~/.ssh/buaws-kuali-rsa /var/lib/jenkins/workspace/kuali-research-1-build-war/coeus-webapp/target/coeus-webapp-1709.0037.war wrh@10.57.236.68:/home/wrh/
# 4) Remove the private key
rm -f ~/.ssh/buaws-kuali-rsa

# Get the number of files in a directory whose name(s) match a specified pattern ("*_rsa" in this case)
ls -1 *_rsa | wc -l

# Create an rsa key:
ssh-keygen -b 2048 -t rsa -f bu_kuali_id_jenkins_rsa -q -N ""

# Show a log of only those git commits that are tagged and show the date, ref and tag
git log --tags --simplify-by-decoration --pretty="format:%h %ci %d" -n 10

# Show only the names of files that have been committed in the last 3 months by the specified committers
git log --no-merges --committer=wrh --committer=mukadder --name-only --pretty=format:"" --since=3.months.ago | sort -u

# urlencode a string. Can be used to supply a password along with a command against a git repository that requires authentication (if not using a key).
ENCODED_PASSWORD="$(echo -ne $GIT_PASSWORD | xxd -plain | tr -d '\n' | sed 's/\(..\)/%\1/g')"
git pull https://$GIT_USER:$ENCODED_PASSWORD@myrepo master

# Delete a branch from a remote repository
git push origin :the_remote_branch
or...
git push origin --delete the_remote_branch

# Put the content of a file into a variable as base64
base64var="$(base64 -w 0 myfile.txt)"
echo ${base64var} | base64 --decode > myfile.copy.txt

# Grep a javascript codebase without getting minified results and map files:
grep -r \
--exclude=*.bundle.js \
--exclude=bundle.js \
--exclude=*.min.js \
--exclude=*.min.js.* \
--exclude=*.map \
'NODE_ENV' .


Examples of cat <<EOF syntax usage in Bash:
----------------------------------------------------------------------------------
1. Assign multi-line string to a shell variable
$ sql=$(cat <<EOF
SELECT foo, bar FROM db
WHERE foo='baz'
EOF
)
The $sql variable now holds the new-line characters too. 
You can verify with echo -e "$sql".

2. Pass multi-line string to a file in Bash
$ cat <<EOF > print.sh
#!/bin/bash
echo \$PWD
echo $PWD
EOF
The print.sh file now contains:

#!/bin/bash
echo $PWD
echo /home/user
3. Pass multi-line string to a pipe in Bash
$ cat <<EOF | grep 'b' | tee b.txt
foo
bar
baz
EOF
The b.txt file contains bar and baz lines. The same output is printed to stdout


Upgrade the version of aws cli to the latest version:
$ pip install awscli --upgrade --user
NOTE: This will apply only to the current user.

# Remove all docker containers
for c in $(docker ps -a --format "{{.ID}}") ; do docker rm -f $c; done

# Remove all docker containers from a certain image "java:6"
for c in $(docker ps -a --filter ancestor=java:6 --format "{{.ID}}") ; do docker rm -f $c; done

# Remove all docker containers that are exited (no longer running)
for c in $(docker ps -a --filter status=exited --format "{{.ID}}") ; do docker rm -f $c; done

# Pretty print out all docker mounts for a container.
docker inspect -f "{{json .Mounts}}" kuali-research | jq

# Pretty print out all docker port bindings for a container.
docker inspect -f "{{json .HostConfig.PortBindings}}" kuali-research | jq

# Remove all docker images 6 months or older
docker rmi $(docker images | awk '($4 >= 6 && $5 == "months") || ($5 == "years") {print $3}')) 2> /dev/null && \
docker rmi $(docker images -a --filter dangling=true -q)

# Iterate over lines in a file
while read line; do
  echo $line
done < myfile.txt

# Iterate over lines in a file that match certain criterion
cat myfile.txt | grep 'some filter expression' | while read line; do
  echo $line
done

# Iterate over lines with spaces (below example lists only subdirectories without separating directories with spaces in the name on separate lines)
find . -type f -iname '*.template' | \
  while read line; do \
    echo $line; \
  done

# Execute a function against file found
# Example: this use of find searches a diretorie(s) of jar files for any contained file that matches a pattern
find *.jar -exec jar -tf '{}' \; | grep EncodingDetector


# Export a docker container and send it to someone.
docker export NAME | gzip > NAME.gz

# Receive an exported docker container and import it.
zcat NAME.gz | docker import - NAME
docker run -i -t NAME /bin/bash

# To start an interactive shell into a docker container on windows, you must use winpty:
winpty docker run -ti --name=mycontainer myimage

# To prevent Git Bash Shell doing window path conversion, set the MSYS_NO_PATHCONV environment variable.
# For example, if you wanted to see what the default configuration file for the nginx image looked like, you would use:
winpty docker run -ti --name=mycontainer myimage cat nginx /etc/nginx/nginx.conf
# However, this results in:
cat: 'C:/Program Files/Git/etc/nginx/nginx.conf': No such file or directory
# To avoid this:
export MSYS_NO_PATHCONV=1 && winpty docker run -ti --name=mycontainer myimage cat nginx /etc/nginx/nginx.conf

# Archive a dir or file with gzip compression
tar -czvf name-of-archive.tar.gz /path/to/directory-or-file

# Extract an archive created with gzip compression
tar -xzvf archive.tar.gz -C /tmp
